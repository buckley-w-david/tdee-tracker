# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `technical-analysis` gem.
# Please instead update this file by running `bin/tapioca gem technical-analysis`.


# source://technical-analysis//lib/technical_analysis/helpers/array_helper.rb#1
module TechnicalAnalysis; end

# Accumulation/Distribution Index
#
# source://technical-analysis//lib/technical_analysis/indicators/adi.rb#3
class TechnicalAnalysis::Adi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the Accumulation/Distribution Index (ADI) for the given data
    # https://en.wikipedia.org/wiki/Accumulation/distribution_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close, :volume)
    # @return [Array<AdiValue>] An array of AdiValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#51
    def calculate(data); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#42
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/adi.rb#82
class TechnicalAnalysis::AdiValue
  # @return [AdiValue] a new instance of AdiValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#90
  def initialize(date_time: T.unsafe(nil), adi: T.unsafe(nil)); end

  # @return [Float] the adi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#88
  def adi; end

  # @return [Float] the adi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#88
  def adi=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#85
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#85
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adi.rb#96
  def to_hash; end
end

# Average Daily Trading Volume
#
# source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#3
class TechnicalAnalysis::Adtv < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the average daily trading volume (ADTV) for the data over the given period
    # https://www.investopedia.com/terms/a/averagedailytradingvolume.asp
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given number of days used to calculate the ADTV
    # @param volume_key [Symbol] The hash key for the volume data. Default :value
    # @return [Array<AdtvValue>] An array of AdtvValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#53
    def calculate(data, period: T.unsafe(nil), volume_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#79
class TechnicalAnalysis::AdtvValue
  # @return [AdtvValue] a new instance of AdtvValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#87
  def initialize(date_time: T.unsafe(nil), adtv: T.unsafe(nil)); end

  # @return [Float] the adtv calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#85
  def adtv; end

  # @return [Float] the adtv calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#85
  def adtv=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#82
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#82
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adtv.rb#93
  def to_hash; end
end

# Average Direcitonal Index
#
# source://technical-analysis//lib/technical_analysis/indicators/adx.rb#3
class TechnicalAnalysis::Adx < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the average directional index (ADX) for the data over the given period
    # https://en.wikipedia.org/wiki/Average_directional_movement_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param period [Integer] The given period to calculate the ADX
    # @return [Array<AdxValue>] An array of AdxValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#31
    def validate_options(options); end

    private

    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#106
    def calculate_dm(current_price, prev_price); end

    # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#121
    def smooth_periodic_values(period, periodic_values, smoothed_values); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/adx.rb#139
class TechnicalAnalysis::Adx::AdxValue
  # @return [AdxValue] a new instance of AdxValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#153
  def initialize(date_time: T.unsafe(nil), adx: T.unsafe(nil), di_pos: T.unsafe(nil), di_neg: T.unsafe(nil)); end

  # @return [Float] the adx calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#145
  def adx; end

  # @return [Float] the adx calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#145
  def adx=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#142
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#142
  def date_time=(_arg0); end

  # @return [Float] the negative directional indicator calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#151
  def di_neg; end

  # @return [Float] the negative directional indicator calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#151
  def di_neg=(_arg0); end

  # @return [Float] the positive directional indicator calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#148
  def di_pos; end

  # @return [Float] the positive directional indicator calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#148
  def di_pos=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/adx.rb#161
  def to_hash; end
end

# Awesome Oscillator
#
# source://technical-analysis//lib/technical_analysis/indicators/ao.rb#3
class TechnicalAnalysis::Ao < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the awesome oscillator for the data over the given period
    # https://www.tradingview.com/wiki/Awesome_Oscillator_(AO)
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low)
    # @param short_period [Integer] The given period to calculate the short period SMA
    # @param long_period [Integer] The given period to calculate the long period SMA
    # @return [Array<AoValue>] An array of AoValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#53
    def calculate(data, short_period: T.unsafe(nil), long_period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#41
    def min_data_size(long_period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/ao.rb#86
class TechnicalAnalysis::AoValue
  # @return [AoValue] a new instance of AoValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#94
  def initialize(date_time: T.unsafe(nil), ao: T.unsafe(nil)); end

  # @return [Float] the ao calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#92
  def ao; end

  # @return [Float] the ao calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#92
  def ao=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#89
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#89
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ao.rb#100
  def to_hash; end
end

# source://technical-analysis//lib/technical_analysis/helpers/array_helper.rb#2
class TechnicalAnalysis::ArrayHelper
  class << self
    # source://technical-analysis//lib/technical_analysis/helpers/array_helper.rb#12
    def average(data); end

    # source://technical-analysis//lib/technical_analysis/helpers/array_helper.rb#8
    def mean(data); end

    # source://technical-analysis//lib/technical_analysis/helpers/array_helper.rb#16
    def sample_variance(data); end

    # source://technical-analysis//lib/technical_analysis/helpers/array_helper.rb#22
    def standard_deviation(data); end

    # source://technical-analysis//lib/technical_analysis/helpers/array_helper.rb#4
    def sum(data); end
  end
end

# Average True Range
#
# source://technical-analysis//lib/technical_analysis/indicators/atr.rb#3
class TechnicalAnalysis::Atr < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the average true range (ATR) for the data over the given period
    # https://en.wikipedia.org/wiki/Average_true_range
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param period [Integer] The given period to calculate the ATR
    # @return [Array<AtrValue>] An array of AtrValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/atr.rb#90
class TechnicalAnalysis::AtrValue
  # @return [AtrValue] a new instance of AtrValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#98
  def initialize(date_time: T.unsafe(nil), atr: T.unsafe(nil)); end

  # @return [Float] the atr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#96
  def atr; end

  # @return [Float] the atr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#96
  def atr=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#93
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#93
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/atr.rb#104
  def to_hash; end
end

# Bollinger Bands
#
# source://technical-analysis//lib/technical_analysis/indicators/bb.rb#3
class TechnicalAnalysis::Bb < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the bollinger bands (BB) for the data over the given period
    # https://en.wikipedia.org/wiki/Bollinger_Bands
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the BB
    # @param standard_deviations [Float] The given standard deviations to calculate the upper and
    #   lower bands of the BB
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<BbValue>] An array of BbValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#55
    def calculate(data, period: T.unsafe(nil), standard_deviations: T.unsafe(nil), price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/bb.rb#94
class TechnicalAnalysis::BbValue
  # @return [BbValue] a new instance of BbValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#108
  def initialize(date_time: T.unsafe(nil), lower_band: T.unsafe(nil), middle_band: T.unsafe(nil), upper_band: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#97
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#97
  def date_time=(_arg0); end

  # @return [Float] the lower_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#100
  def lower_band; end

  # @return [Float] the lower_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#100
  def lower_band=(_arg0); end

  # @return [Float] the middle_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#103
  def middle_band; end

  # @return [Float] the middle_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#103
  def middle_band=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#116
  def to_hash; end

  # @return [Float] the upper_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#106
  def upper_band; end

  # @return [Float] the upper_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/bb.rb#106
  def upper_band=(_arg0); end
end

# source://technical-analysis//lib/technical_analysis/indicators/cci.rb#2
class TechnicalAnalysis::Cci < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the commodity channel index (CCI) for the data over the given period
    # https://en.wikipedia.org/wiki/Commodity_channel_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param period [Integer] The given period to calculate the CCI
    # @param constant [Float] The given constant to ensure that approximately 70 to 80 percent of
    #   CCI values would fall between −100 and +100
    # @return [Array<CciValue>] An array of CciValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#53
    def calculate(data, period: T.unsafe(nil), constant: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#14
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#7
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#40
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#21
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#30
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/cci.rb#86
class TechnicalAnalysis::CciValue
  # @return [CciValue] a new instance of CciValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#94
  def initialize(date_time: T.unsafe(nil), cci: T.unsafe(nil)); end

  # @return [Float] the cci calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#92
  def cci; end

  # @return [Float] the cci calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#92
  def cci=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#89
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#89
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cci.rb#100
  def to_hash; end
end

# Chaikin Money Flow
#
# source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#3
class TechnicalAnalysis::Cmf < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the chaikin money flow (CMF) for the data over the given period
    # https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:chaikin_money_flow_cmf
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close, :volume)
    # @param period [Integer] The given period to calculate the CMF
    # @return [Array<CmfValue>] An array of CmfValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#86
class TechnicalAnalysis::CmfValue
  # @return [CmfValue] a new instance of CmfValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#94
  def initialize(date_time: T.unsafe(nil), cmf: T.unsafe(nil)); end

  # @return [Float] the cmf calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#92
  def cmf; end

  # @return [Float] the cmf calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#92
  def cmf=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#89
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#89
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cmf.rb#100
  def to_hash; end
end

# Cumulative Return
#
# source://technical-analysis//lib/technical_analysis/indicators/cr.rb#3
class TechnicalAnalysis::Cr < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the cumulative return (CR) for the data over the given period
    # https://www.investopedia.com/terms/c/cumulativereturn.asp
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<CrValue>] An array of CrValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#52
    def calculate(data, price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#41
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/cr.rb#76
class TechnicalAnalysis::CrValue
  # @return [CrValue] a new instance of CrValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#84
  def initialize(date_time: T.unsafe(nil), cr: T.unsafe(nil)); end

  # @return [Float] the cr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#82
  def cr; end

  # @return [Float] the cr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#82
  def cr=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#79
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#79
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/cr.rb#90
  def to_hash; end
end

# Donchian Channel
#
# source://technical-analysis//lib/technical_analysis/indicators/dc.rb#3
class TechnicalAnalysis::Dc < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the donchian channel (DC) for the data over the given period
    # https://en.wikipedia.org/wiki/Donchian_channel
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the DC
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<DcValue>] An array of DcValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#53
    def calculate(data, period: T.unsafe(nil), price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/dc.rb#85
class TechnicalAnalysis::DcValue
  # @return [DcValue] a new instance of DcValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#96
  def initialize(date_time: T.unsafe(nil), upper_bound: T.unsafe(nil), lower_bound: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#88
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#88
  def date_time=(_arg0); end

  # @return [Float] the lower_bound calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#94
  def lower_bound; end

  # @return [Float] the lower_bound calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#94
  def lower_bound=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#103
  def to_hash; end

  # @return [Float] the upper_bound calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#91
  def upper_bound; end

  # @return [Float] the upper_bound calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dc.rb#91
  def upper_bound=(_arg0); end
end

# Daily Log Return
#
# source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#3
class TechnicalAnalysis::Dlr < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the daily log return (percent expressed as a decimal) for the data over the given period
    # https://www.quora.com/What-are-daily-log-returns-of-an-equity
    # https://en.wikipedia.org/wiki/Rate_of_return#Logarithmic_or_continuously_compounded_return
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<DlrValue>] An array of DlrValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#53
    def calculate(data, price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#41
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#78
class TechnicalAnalysis::DlrValue
  # @return [DlrValue] a new instance of DlrValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#86
  def initialize(date_time: T.unsafe(nil), dlr: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#81
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#81
  def date_time=(_arg0); end

  # @return [Float] the dlr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#84
  def dlr; end

  # @return [Float] the dlr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#84
  def dlr=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dlr.rb#92
  def to_hash; end
end

# Detrended Price Oscillator
#
# source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#3
class TechnicalAnalysis::Dpo < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the detrended price oscillator for the data over the given period
    # https://en.wikipedia.org/wiki/Detrended_price_oscillator
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the SMA
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<DpoValue>]
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#53
    def calculate(data, period: T.unsafe(nil), price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#87
class TechnicalAnalysis::DpoValue
  # @return [DpoValue] a new instance of DpoValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#95
  def initialize(date_time: T.unsafe(nil), dpo: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#90
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#90
  def date_time=(_arg0); end

  # @return [Float] the dpo calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#93
  def dpo; end

  # @return [Float] the dpo calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#93
  def dpo=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dpo.rb#101
  def to_hash; end
end

# Daily Return
#
# source://technical-analysis//lib/technical_analysis/indicators/dr.rb#3
class TechnicalAnalysis::Dr < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the daily return (percent expressed as a decimal) for the data over the given period
    # https://en.wikipedia.org/wiki/Rate_of_return
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<DrValue>] An array of DrValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#52
    def calculate(data, price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#41
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/dr.rb#77
class TechnicalAnalysis::DrValue
  # @return [DrValue] a new instance of DrValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#85
  def initialize(date_time: T.unsafe(nil), dr: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#80
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#80
  def date_time=(_arg0); end

  # @return [Float] the dr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#83
  def dr; end

  # @return [Float] the dr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#83
  def dr=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/dr.rb#91
  def to_hash; end
end

# Exponential Moving Average
#
# source://technical-analysis//lib/technical_analysis/indicators/ema.rb#3
class TechnicalAnalysis::Ema < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the exponential moving average (EMA) for the data over the given period
    # https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the EMA
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @param date_time_key [Symbol] The hash key for the date time data. Default :date_time
    # @return [Array<EmaValue>] An array of EmaValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#54
    def calculate(data, period: T.unsafe(nil), price_key: T.unsafe(nil), date_time_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/ema.rb#85
class TechnicalAnalysis::EmaValue
  # @return [EmaValue] a new instance of EmaValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#93
  def initialize(date_time: T.unsafe(nil), ema: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#88
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#88
  def date_time=(_arg0); end

  # @return [Float] the ema calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#91
  def ema; end

  # @return [Float] the ema calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#91
  def ema=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ema.rb#99
  def to_hash; end
end

# Ease of Movement
#
# source://technical-analysis//lib/technical_analysis/indicators/eom.rb#3
class TechnicalAnalysis::Eom < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the ease of movement (EoM) for the data over the given period
    # https://en.wikipedia.org/wiki/Ease_of_movement
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :volume)
    # @param period [Integer] The given period to calculate the EoM
    # @return [Array<Hash>] An array of EomValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/eom.rb#85
class TechnicalAnalysis::EomValue
  # @return [EomValue] a new instance of EomValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#93
  def initialize(date_time: T.unsafe(nil), eom: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#88
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#88
  def date_time=(_arg0); end

  # @return [Float] the eom calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#91
  def eom; end

  # @return [Float] the eom calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#91
  def eom=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/eom.rb#99
  def to_hash; end
end

# Force Index
#
# source://technical-analysis//lib/technical_analysis/indicators/fi.rb#3
class TechnicalAnalysis::Fi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the force index (FI) for the data
    # https://en.wikipedia.org/wiki/Force_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :close, :volume)
    # @return [Array<FiValue>] An array of FiValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#52
    def calculate(data); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#42
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/fi.rb#76
class TechnicalAnalysis::FiValue
  # @return [FiValue] a new instance of FiValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#84
  def initialize(date_time: T.unsafe(nil), fi: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#79
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#79
  def date_time=(_arg0); end

  # @return [Float] the fi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#82
  def fi; end

  # @return [Float] the fi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#82
  def fi=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/fi.rb#90
  def to_hash; end
end

# Ichimoku Kinko Hyo
#
# source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#3
class TechnicalAnalysis::Ichimoku < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the 5 points of Ichimoku Kinko Hyo (Ichimoku) for the data over the given period
    #   1. tenkan_sen    (Conversion Line)
    #   2. kijun_sen     (Base Line)
    #   3. senkou_span_a (Leading Span A)
    #   4. senkou_span_b (Leading Span B)
    #   5. chickou_span  (Lagging Span)
    # https://en.wikipedia.org/wiki/Ichimoku_Kink%C5%8D_Hy%C5%8D
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param low_period [Integer] The given period to calculate tenkan_sen (Conversion Line)
    # @param medium_period [Integer] The given period to calculate kijun_sen (Base Line), senkou_span_a (Leading Span A), and chikou_span (Lagging Span)
    # @param high_period [Integer] The given period to calculate senkou_span_b (Leading Span B)
    # @return [Array<IchimokuValue>] An array of IchimokuValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#59
    def calculate(data, low_period: T.unsafe(nil), medium_period: T.unsafe(nil), high_period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#41
    def min_data_size(medium_period: T.unsafe(nil), high_period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#31
    def validate_options(options); end

    private

    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#128
    def calculate_chikou_span(index, medium_period, data); end

    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#104
    def calculate_midpoint(index, period, data); end

    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#113
    def calculate_senkou_span_a(index, low_period, medium_period, data); end

    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#122
    def calculate_senkou_span_b(index, medium_period, high_period, data); end

    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#100
    def highest_high(prices); end

    # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#96
    def lowest_low(prices); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#137
class TechnicalAnalysis::IchimokuValue
  # @return [IchimokuValue] a new instance of IchimokuValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#157
  def initialize(date_time: T.unsafe(nil), tenkan_sen: T.unsafe(nil), kijun_sen: T.unsafe(nil), senkou_span_a: T.unsafe(nil), senkou_span_b: T.unsafe(nil), chikou_span: T.unsafe(nil)); end

  # @return [Float] the chikou_span calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#155
  def chikou_span; end

  # @return [Float] the chikou_span calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#155
  def chikou_span=(_arg0); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#140
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#140
  def date_time=(_arg0); end

  # @return [Float] the kijun_sen calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#146
  def kijun_sen; end

  # @return [Float] the kijun_sen calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#146
  def kijun_sen=(_arg0); end

  # @return [Float] the senkou_span_a calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#149
  def senkou_span_a; end

  # @return [Float] the senkou_span_a calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#149
  def senkou_span_a=(_arg0); end

  # @return [Float] the senkou_span_b calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#152
  def senkou_span_b; end

  # @return [Float] the senkou_span_b calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#152
  def senkou_span_b=(_arg0); end

  # @return [Float] the tenkan_sen calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#143
  def tenkan_sen; end

  # @return [Float] the tenkan_sen calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#143
  def tenkan_sen=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/ichimoku.rb#167
  def to_hash; end
end

# source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#2
class TechnicalAnalysis::Indicator
  class << self
    # Find the applicable indicator and looks up the value
    #
    # @param indicator_symbol [String] Downcased string of the indicator symbol
    # @param data [Array] Array of hashes of price data to perform calcualtion on
    # @param calculation [Symbol] The calculation to be performed on the requested indicator and params
    # @param options [Hash] A hash containing options for the requested calculation
    # @return Returns the requested calculation
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#78
    def calculate(indicator_symbol, data, calculation, options = T.unsafe(nil)); end

    # Finds the applicable indicator and returns an instance
    #
    # @param indicator_symbol [String] Downcased string of the indicator symbol
    # @return TechnicalAnalysis::ClassName
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#62
    def find(indicator_symbol); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#134
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#127
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#101
    def min_data_size(indicator_symbol, options); end

    # Returns an array of TechnicalAnalysis modules
    #
    # @return [Array] A list of TechnicalAnalysis::Class
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#18
    def roster; end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#119
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#111
    def validate_options(options); end
  end
end

# source://technical-analysis//lib/technical_analysis/indicators/indicator.rb#4
TechnicalAnalysis::Indicator::CALCULATIONS = T.let(T.unsafe(nil), Array)

# Keltner Channel
#
# source://technical-analysis//lib/technical_analysis/indicators/kc.rb#3
class TechnicalAnalysis::Kc < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the keltner channel (KC) for the data over the given period
    # https://en.wikipedia.org/wiki/Keltner_channel
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param period [Integer] The given period to calculate the KC
    # @return [Array<KcValue>] An array of KcValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/kc.rb#92
class TechnicalAnalysis::KcValue
  # @return [KcValue] a new instance of KcValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#106
  def initialize(date_time: T.unsafe(nil), lower_band: T.unsafe(nil), middle_band: T.unsafe(nil), upper_band: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#95
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#95
  def date_time=(_arg0); end

  # @return [Float] the lower_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#98
  def lower_band; end

  # @return [Float] the lower_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#98
  def lower_band=(_arg0); end

  # @return [Float] the middle_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#101
  def middle_band; end

  # @return [Float] the middle_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#101
  def middle_band=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#114
  def to_hash; end

  # @return [Float] the upper_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#104
  def upper_band; end

  # @return [Float] the upper_band calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kc.rb#104
  def upper_band=(_arg0); end
end

# Know Sure Thing
#
# source://technical-analysis//lib/technical_analysis/indicators/kst.rb#3
class TechnicalAnalysis::Kst < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the know sure thing (KST) for the data over the given period
    # https://en.wikipedia.org/wiki/KST_oscillator
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param roc1 [Integer] The given period to calculate the rate-of-change for RCMA1
    # @param roc2 [Integer] The given period to calculate the rate-of-change for RCMA2
    # @param roc3 [Integer] The given period to calculate the rate-of-change for RCMA3
    # @param roc4 [Integer] The given period to calculate the rate-of-change for RCMA4
    # @param sma1 [Integer] The given period to calculate the SMA of the rate-of-change for RCMA1
    # @param sma2 [Integer] The given period to calculate the SMA of the rate-of-change for RCMA2
    # @param sma3 [Integer] The given period to calculate the SMA of the rate-of-change for RCMA3
    # @param sma4 [Integer] The given period to calculate the SMA of the rate-of-change for RCMA4
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<KstValue>] An array of KstValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#60
    def calculate(data, roc1: T.unsafe(nil), roc2: T.unsafe(nil), roc3: T.unsafe(nil), roc4: T.unsafe(nil), sma1: T.unsafe(nil), sma2: T.unsafe(nil), sma3: T.unsafe(nil), sma4: T.unsafe(nil), price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#41
    def min_data_size(roc4: T.unsafe(nil), sma4: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#31
    def validate_options(options); end

    private

    # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#96
    def calculate_rcma(data, index, price_key, roc, sma); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/kst.rb#113
class TechnicalAnalysis::KstValue
  # @return [KstValue] a new instance of KstValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#121
  def initialize(date_time: T.unsafe(nil), kst: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#116
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#116
  def date_time=(_arg0); end

  # @return [Float] the kst calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#119
  def kst; end

  # @return [Float] the kst calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#119
  def kst=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/kst.rb#127
  def to_hash; end
end

# Moving Average Convergence Divergence
#
# source://technical-analysis//lib/technical_analysis/indicators/macd.rb#3
class TechnicalAnalysis::Macd < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the moving average convergence divergence (MACD) for the data over the given period
    # https://en.wikipedia.org/wiki/MACD
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param fast_period [Integer] The given period to calculate the fast moving EMA for MACD
    # @param slow_period [Integer] The given period to calculate the slow moving EMA for MACD
    # @param signal_period [Integer] The given period to calculate the signal line for MACD
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<MacdValue>] An array of MacdValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#55
    def calculate(data, fast_period: T.unsafe(nil), slow_period: T.unsafe(nil), signal_period: T.unsafe(nil), price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#41
    def min_data_size(slow_period: T.unsafe(nil), signal_period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/macd.rb#112
class TechnicalAnalysis::MacdValue
  # @return [MacdValue] a new instance of MacdValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#126
  def initialize(date_time: T.unsafe(nil), macd_line: T.unsafe(nil), macd_histogram: T.unsafe(nil), signal_line: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#115
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#115
  def date_time=(_arg0); end

  # @return [Float] the macd_histogram calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#121
  def macd_histogram; end

  # @return [Float] the macd_histogram calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#121
  def macd_histogram=(_arg0); end

  # @return [Float] the macd_line calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#118
  def macd_line; end

  # @return [Float] the macd_line calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#118
  def macd_line=(_arg0); end

  # @return [Float] the signal_line calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#124
  def signal_line; end

  # @return [Float] the signal_line calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#124
  def signal_line=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/macd.rb#134
  def to_hash; end
end

# Monoey Flow Index
#
# source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#3
class TechnicalAnalysis::Mfi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the money flow index (MFI) for the data over the given period
    # https://en.wikipedia.org/wiki/Money_flow_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close, :volume)
    # @param period [Integer] The given period to calculate the MFI
    # @return [Array<MfiValue>] An array of MfiValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#100
class TechnicalAnalysis::MfiValue
  # @return [MfiValue] a new instance of MfiValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#108
  def initialize(date_time: T.unsafe(nil), mfi: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#103
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#103
  def date_time=(_arg0); end

  # @return [Float] the mfi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#106
  def mfi; end

  # @return [Float] the mfi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#106
  def mfi=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mfi.rb#114
  def to_hash; end
end

# Mass Index
#
# source://technical-analysis//lib/technical_analysis/indicators/mi.rb#3
class TechnicalAnalysis::Mi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the mass index (MI) for the data over the given period
    # https://en.wikipedia.org/wiki/Mass_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low)
    # @param ema_period [Integer] The given period to calculate the EMA and EMA of EMA
    # @param sum_period [Integer] The given period to calculate the sum of EMA ratios
    # @return [Array<MiValue>] An array of MiValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#53
    def calculate(data, ema_period: T.unsafe(nil), sum_period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#41
    def min_data_size(ema_period: T.unsafe(nil), sum_period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/mi.rb#102
class TechnicalAnalysis::MiValue
  # @return [MiValue] a new instance of MiValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#110
  def initialize(date_time: T.unsafe(nil), mi: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#105
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#105
  def date_time=(_arg0); end

  # @return [Float] the mi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#108
  def mi; end

  # @return [Float] the mi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#108
  def mi=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/mi.rb#116
  def to_hash; end
end

# Negative Volume Index
#
# source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#3
class TechnicalAnalysis::Nvi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the negative volume index (NVI) for the data
    # https://en.wikipedia.org/wiki/Negative_volume_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :close, :volume)
    # @return [Array<NviValue>] An array of NviValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#52
    def calculate(data); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#42
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#83
class TechnicalAnalysis::NviValue
  # @return [NviValue] a new instance of NviValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#91
  def initialize(date_time: T.unsafe(nil), nvi: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#86
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#86
  def date_time=(_arg0); end

  # @return [Float] the nvi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#89
  def nvi; end

  # @return [Float] the nvi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#89
  def nvi=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/nvi.rb#97
  def to_hash; end
end

# On-balance Volume
#
# source://technical-analysis//lib/technical_analysis/indicators/obv.rb#3
class TechnicalAnalysis::Obv < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the on-balance volume (OBV) for the data over the given period
    # https://en.wikipedia.org/wiki/On-balance_volume
    #
    # @param data [Array] Array of hashes with keys (:date_time, :close, :volume)
    # @return [Array<ObvValue>] An array of ObvValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#52
    def calculate(data); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#42
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#31
    def validate_options(options); end
  end
end

# On-balance Volume Mean
#
# source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#3
class TechnicalAnalysis::ObvMean < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the on-balance volume mean (OBV mean) for the data over the given period
    # https://en.wikipedia.org/wiki/On-balance_volume
    #
    # @param data [Array] Array of hashes with keys (:date_time, :close, :volume)
    # @param period [Integer] The given period to calculate the OBV mean
    # @return [Array<ObvMeanValue>] An array of ObvMeanValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#91
class TechnicalAnalysis::ObvMeanValue
  # @return [ObvMeanValue] a new instance of ObvMeanValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#99
  def initialize(date_time: T.unsafe(nil), obv_mean: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#94
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#94
  def date_time=(_arg0); end

  # @return [Float] the obv_mean calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#97
  def obv_mean; end

  # @return [Float] the obv_mean calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#97
  def obv_mean=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv_mean.rb#105
  def to_hash; end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/obv.rb#85
class TechnicalAnalysis::ObvValue
  # @return [ObvValue] a new instance of ObvValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#93
  def initialize(date_time: T.unsafe(nil), obv: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#88
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#88
  def date_time=(_arg0); end

  # @return [Float] the obv calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#91
  def obv; end

  # @return [Float] the obv calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#91
  def obv=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/obv.rb#99
  def to_hash; end
end

# Relative Strength Index
#
# source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#3
class TechnicalAnalysis::Rsi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the relative strength index for the data over the given period
    # https://en.wikipedia.org/wiki/Relative_strength_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the RSI
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @param date_time_key [Symbol] The hash key for the date time data. Default :date_time
    # @return [Array<RsiValue>] An array of RsiValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#54
    def calculate(data, period: T.unsafe(nil), price_key: T.unsafe(nil), date_time_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#115
class TechnicalAnalysis::RsiValue
  # @return [RsiValue] a new instance of RsiValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#123
  def initialize(date_time: T.unsafe(nil), rsi: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#118
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#118
  def date_time=(_arg0); end

  # @return [Float] the rsi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#121
  def rsi; end

  # @return [Float] the rsi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#121
  def rsi=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/rsi.rb#129
  def to_hash; end
end

# Simple Moving Average
#
# source://technical-analysis//lib/technical_analysis/indicators/sma.rb#3
class TechnicalAnalysis::Sma < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the simple moving average (SMA) for the data over the given period
    # https://en.wikipedia.org/wiki/Moving_average#Simple_moving_average
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the SMA
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @param date_time_key [Symbol] The hash key for the date time data. Default :date_time
    # @return [Array<SmaValue>] An array of SmaValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#54
    def calculate(data, period: T.unsafe(nil), price_key: T.unsafe(nil), date_time_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/sma.rb#81
class TechnicalAnalysis::SmaValue
  # @return [SmaValue] a new instance of SmaValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#89
  def initialize(date_time: T.unsafe(nil), sma: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#84
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#84
  def date_time=(_arg0); end

  # @return [Float] the sma calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#87
  def sma; end

  # @return [Float] the sma calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#87
  def sma=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sma.rb#95
  def to_hash; end
end

# Stochastic Oscillator
#
# source://technical-analysis//lib/technical_analysis/indicators/sr.rb#3
class TechnicalAnalysis::Sr < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the stochastic oscillator (%K) for the data over the given period
    # https://en.wikipedia.org/wiki/Stochastic_oscillator
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param period [Integer] The given period to calculate the SR
    # @param signal_period [Integer] The given period to calculate the SMA as a signal line for SR
    # @return [Array<SrValue>] An array of SrValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#53
    def calculate(data, period: T.unsafe(nil), signal_period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#41
    def min_data_size(period: T.unsafe(nil), signal_period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/sr.rb#99
class TechnicalAnalysis::SrValue
  # @return [SrValue] a new instance of SrValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#110
  def initialize(date_time: T.unsafe(nil), sr: T.unsafe(nil), sr_signal: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#102
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#102
  def date_time=(_arg0); end

  # @return [Float] the sr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#105
  def sr; end

  # @return [Float] the sr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#105
  def sr=(_arg0); end

  # @return [Float] the sr_signal calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#108
  def sr_signal; end

  # @return [Float] the sr_signal calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#108
  def sr_signal=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/sr.rb#117
  def to_hash; end
end

# source://technical-analysis//lib/technical_analysis/helpers/stock_calculation.rb#2
class TechnicalAnalysis::StockCalculation
  class << self
    # source://technical-analysis//lib/technical_analysis/helpers/stock_calculation.rb#16
    def ema(current_value, data, period, prev_value); end

    # source://technical-analysis//lib/technical_analysis/helpers/stock_calculation.rb#4
    def true_range(current_high, current_low, previous_close); end

    # source://technical-analysis//lib/technical_analysis/helpers/stock_calculation.rb#12
    def typical_price(price); end

    # source://technical-analysis//lib/technical_analysis/helpers/stock_calculation.rb#24
    def wma(data); end
  end
end

# Triple Exponential Average
#
# source://technical-analysis//lib/technical_analysis/indicators/trix.rb#3
class TechnicalAnalysis::Trix < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the triple exponential average (Trix) for the data over the given period
    # https://en.wikipedia.org/wiki/Trix_(technical_analysis)
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the EMA for Trix
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<TrixValue>] An array of TrixValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#53
    def calculate(data, period: T.unsafe(nil), price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/trix.rb#108
class TechnicalAnalysis::TrixValue
  # @return [TrixValue] a new instance of TrixValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#116
  def initialize(date_time: T.unsafe(nil), trix: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#111
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#111
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#122
  def to_hash; end

  # @return [Float] the trix calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#114
  def trix; end

  # @return [Float] the trix calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/trix.rb#114
  def trix=(_arg0); end
end

# True Strength Index
#
# source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#3
class TechnicalAnalysis::Tsi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the true strength index (TSI) for the data over the given period
    # https://en.wikipedia.org/wiki/True_strength_index
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param high_period [Integer] The given high period to calculate the EMA
    # @param low_period [Integer] The given low period to calculate the EMA
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @return [Array<TsiValue>] An array of TsiValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#54
    def calculate(data, low_period: T.unsafe(nil), high_period: T.unsafe(nil), price_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#41
    def min_data_size(low_period: T.unsafe(nil), high_period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#31
    def validate_options(options); end

    private

    # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#104
    def process_ema(current_value, data, multiplier, period, store); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#120
class TechnicalAnalysis::TsiValue
  # @return [TsiValue] a new instance of TsiValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#128
  def initialize(date_time: T.unsafe(nil), tsi: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#123
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#123
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#134
  def to_hash; end

  # @return [Float] the tsi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#126
  def tsi; end

  # @return [Float] the tsi calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/tsi.rb#126
  def tsi=(_arg0); end
end

# Ultimate Oscillator
#
# source://technical-analysis//lib/technical_analysis/indicators/uo.rb#3
class TechnicalAnalysis::Uo < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the ultimate oscillator (UO) for the data over the given period
    # https://en.wikipedia.org/wiki/Ultimate_oscillator
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param short_period [Integer] The given short period
    # @param medium_period [Integer] The given medium period
    # @param long_period [Integer] The given long period
    # @param short_weight [Float] Weight of short Buying Pressure average for UO
    # @param medium_weight [Float] Weight of medium Buying Pressure average for UO
    # @param long_weight [Float] Weight of long Buying Pressure average for UO
    # @return [Array<UoValue>] An array of UoValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#57
    def calculate(data, short_period: T.unsafe(nil), medium_period: T.unsafe(nil), long_period: T.unsafe(nil), short_weight: T.unsafe(nil), medium_weight: T.unsafe(nil), long_weight: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#41
    def min_data_size(long_period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#31
    def validate_options(options); end

    private

    # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#101
    def calculate_average(period, data); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/uo.rb#111
class TechnicalAnalysis::UoValue
  # @return [UoValue] a new instance of UoValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#119
  def initialize(date_time: T.unsafe(nil), uo: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#114
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#114
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#125
  def to_hash; end

  # @return [Float] the uo calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#117
  def uo; end

  # @return [Float] the uo calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/uo.rb#117
  def uo=(_arg0); end
end

# source://technical-analysis//lib/technical_analysis/helpers/validation.rb#2
class TechnicalAnalysis::Validation
  class << self
    # source://technical-analysis//lib/technical_analysis/helpers/validation.rb#24
    def validate_date_time_key(data, date_time_key = T.unsafe(nil)); end

    # source://technical-analysis//lib/technical_analysis/helpers/validation.rb#12
    def validate_length(data, size); end

    # source://technical-analysis//lib/technical_analysis/helpers/validation.rb#4
    def validate_numeric_data(data, *keys); end

    # source://technical-analysis//lib/technical_analysis/helpers/validation.rb#16
    def validate_options(options, valid_options); end
  end
end

# source://technical-analysis//lib/technical_analysis/helpers/validation.rb#30
class TechnicalAnalysis::Validation::ValidationError < ::StandardError; end

# Vortex Indicator
#
# source://technical-analysis//lib/technical_analysis/indicators/vi.rb#3
class TechnicalAnalysis::Vi < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the vortex indicator (VI) for the data over the given period
    # https://en.wikipedia.org/wiki/Vortex_indicator
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param period [Integer] The given period to calculate the VI
    # @return [Array<Hash>] An array of ViValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/vi.rb#94
class TechnicalAnalysis::ViValue
  # @return [ViValue] a new instance of ViValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#105
  def initialize(date_time: T.unsafe(nil), positive_vi: T.unsafe(nil), negative_vi: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#97
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#97
  def date_time=(_arg0); end

  # @return [Float] the negative Vortex Indicator value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#103
  def negative_vi; end

  # @return [Float] the negative Vortex Indicator value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#103
  def negative_vi=(_arg0); end

  # @return [Float] the positive Vortex Indicator value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#100
  def positive_vi; end

  # @return [Float] the positive Vortex Indicator value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#100
  def positive_vi=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vi.rb#112
  def to_hash; end
end

# Volume-price Trend
#
# source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#3
class TechnicalAnalysis::Vpt < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the volume-price trend (VPT) for the data
    # https://en.wikipedia.org/wiki/Volume%E2%80%93price_trend
    #
    # @param data [Array] Array of hashes with keys (:date_time, :close, :volume)
    # @return [Array<VptValue>] An array of VptValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#52
    def calculate(data); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#42
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#76
class TechnicalAnalysis::VptValue
  # @return [VptValue] a new instance of VptValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#84
  def initialize(date_time: T.unsafe(nil), vpt: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#79
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#79
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#90
  def to_hash; end

  # @return [Float] the vpt calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#82
  def vpt; end

  # @return [Float] the vpt calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vpt.rb#82
  def vpt=(_arg0); end
end

# Volume Weighted Average Price
#
# source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#3
class TechnicalAnalysis::Vwap < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the volume weighted average price (VWAP) for the data
    # https://en.wikipedia.org/wiki/Volume-weighted_average_price
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close, :volume)
    # @return [Array<VwapValue>] An array of VwapValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#52
    def calculate(data); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#42
    def min_data_size(**params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#78
class TechnicalAnalysis::VwapValue
  # @return [VwapValue] a new instance of VwapValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#86
  def initialize(date_time: T.unsafe(nil), vwap: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#81
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#81
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#92
  def to_hash; end

  # @return [Float] the vwap calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#84
  def vwap; end

  # @return [Float] the vwap calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/vwap.rb#84
  def vwap=(_arg0); end
end

# Weighted Moving Average
#
# source://technical-analysis//lib/technical_analysis/indicators/wma.rb#3
class TechnicalAnalysis::Wma < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the weighted moving average (WMA) for the data over the given period
    # https://en.wikipedia.org/wiki/Moving_average#Weighted_moving_average
    #
    # @param data [Array] Array of hashes with keys (:date_time, :value)
    # @param period [Integer] The given period to calculate the WMA
    # @param price_key [Symbol] The hash key for the price data. Default :value
    # @param date_time_key [Symbol] The hash key for the date time data. Default :date_time
    # @return [Array<WmaValue>] An array of WmaValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#54
    def calculate(data, period: T.unsafe(nil), price_key: T.unsafe(nil), date_time_key: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#41
    def min_data_size(period: T.unsafe(nil), **params); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/wma.rb#82
class TechnicalAnalysis::WmaValue
  # @return [WmaValue] a new instance of WmaValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#90
  def initialize(date_time: T.unsafe(nil), wma: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#85
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#85
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#96
  def to_hash; end

  # @return [Float] the wma calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#88
  def wma; end

  # @return [Float] the wma calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wma.rb#88
  def wma=(_arg0); end
end

# Williams %R
#
# source://technical-analysis//lib/technical_analysis/indicators/wr.rb#3
class TechnicalAnalysis::Wr < ::TechnicalAnalysis::Indicator
  class << self
    # Calculates the Williams %R (WR) for the data over the given period
    # https://en.wikipedia.org/wiki/Williams_%25R
    #
    # @param data [Array] Array of hashes with keys (:date_time, :high, :low, :close)
    # @param period [Integer] The given look-back period to calculate the WR
    # @return [Array<WrValue>] An array of WrValue instances
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#52
    def calculate(data, period: T.unsafe(nil)); end

    # Returns the name of the technical indicator
    #
    # @return [String] A string of the name of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#15
    def indicator_name; end

    # Returns the symbol of the technical indicator
    #
    # @return [String] A string of the symbol of the technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#8
    def indicator_symbol; end

    # Calculates the minimum number of observations needed to calculate the technical indicator
    #
    # @param options [Hash] The options for the technical indicator
    # @return [Integer] Returns the minimum number of observations needed to calculate the technical
    #   indicator based on the options provided
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#41
    def min_data_size(period: T.unsafe(nil)); end

    # Returns an array of valid keys for options for this technical indicator
    #
    # @return [Array] An array of keys as symbols for valid options for this technical indicator
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#22
    def valid_options; end

    # Validates the provided options for this technical indicator
    #
    # @param options [Hash] The options for the technical indicator to be validated
    # @return [Boolean] Returns true if options are valid or raises a ValidationError if they're not
    #
    # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#31
    def validate_options(options); end
  end
end

# The value class to be returned by calculations
#
# source://technical-analysis//lib/technical_analysis/indicators/wr.rb#84
class TechnicalAnalysis::WrValue
  # @return [WrValue] a new instance of WrValue
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#92
  def initialize(date_time: T.unsafe(nil), wr: T.unsafe(nil)); end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#87
  def date_time; end

  # @return [String] the date_time of the obversation as it was provided
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#87
  def date_time=(_arg0); end

  # @return [Hash] the attributes as a hash
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#98
  def to_hash; end

  # @return [Float] the wr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#90
  def wr; end

  # @return [Float] the wr calculation value
  #
  # source://technical-analysis//lib/technical_analysis/indicators/wr.rb#90
  def wr=(_arg0); end
end
